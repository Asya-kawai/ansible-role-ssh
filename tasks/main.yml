---
- name: Update OS package caches for Debian
  apt:
    update_cache: yes
  when: ansible_facts['os_family'] == 'Debian'
  tags:
    - ssh
    - ssh-update-os-packages

- name: Update OS package caches for CentOS
  dnf:
    update_cache: yes
  when: ansible_facts['os_family'] == 'RedHat'
  tags:
    - ssh
    - ssh-update-os-packages

- name: Update OS packages
  package:
    name: '*'
    state: latest
  tags:
    - ssh
    - ssh-update-os-packages

- name: Install OS packages for Debian
  package:
    name: "{{ ssh_debian_install }}"
    state: present
  when: ansible_facts['os_family'] == 'Debian'
  tags:
    - ssh
    - ssh-install-os-packages

- name: Install OS packages for CentOS
  package:
    name: "{{ ssh_redhat_install }}"
    state: present
  when: ansible_facts['os_family'] == 'RedHat'
  tags:
    - ssh
    - ssh-install-os-packages

# Stop ufw before ssh configuration applied.
- name: Stop ufw
  community.general.ufw:
    state: disabled
  when:
    - ansible_facts['os_family'] == 'Debian'
  changed_when: false
  tags:
    - ssh
    - ssh-ufw-disable
    - ssh-firewalld-disable

# Stop firewalld before ssh configuration applied.
- name: Stop Firewalld service
  systemd:
    name: firewalld
    state: stopped
  when:
    - ansible_facts['os_family'] == 'RedHat'
  tags:
    - ssh
    - ssh-firewalld-stop

# SSH configuration
- name: Configure ssh directory
  include_tasks: ssh_dir.yml
  with_items: "{{ users }}"
  loop_control:
    loop_var: user
  tags:
    - ssh
    - ssh-configure-ssh-directory

- name: Check the sshd directory exists
  stat:
    path: "/etc/ssh"
  register: sshd_dir
  tags:
    - ssh
    - ssh-check-sshd-directroy

- name: Configure sshd config
  template:
    src: "{{ ansible_facts['os_family'] }}/{{ item.lstrip('/') }}.j2"
    dest: "{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{ ssh_sshd_config_path }}"
  when:
    - sshd_dir.stat.exists
  notify:
    - Restart sshd
  tags:
    - ssh
    - ssh-configure-ssh-config

- name: Restart sshd service
  systemd:
    name: sshd
    state: started
    daemon_reload: true
    enabled: true
  tags:
    - ssh
    - ssh-restart-sshd-service

# Firewall setting for Ubuntu
- name: Deny all incoming with ufw
  community.general.ufw:
    direction: incoming
    port: any
    policy: deny
  when:
    - ansible_facts['os_family'] == 'Debian'
    - ssh_firewall_enable
  notify:
    - Reload ufw
  tags:
    - ssh-ufw
    - ssh-ufw-deny-all-incoming
    - ssh-firewalld
    - ssh-firewalld-deny-all-incoming

- name: Allow all outgoing with ufw
  community.general.ufw:
    direction: outgoing
    proto: any
    policy: allow
  when:
    - ansible_facts['os_family'] == 'Debian'
    - ssh_firewall_enable
  notify:
    - Reload ufw
  tags:
    - ssh-ufw
    - ssh-ufw-allow-all-outcoming
    - ssh-firewalld
    - ssh-firewalld-allow-all-outcoming

- name: Set logging with ufw
  community.general.ufw:
    logging: on
  notify:
    - Reload ufw
  when:
    - ansible_facts['os_family'] == 'Debian'
    - ssh_firewall_enable
  changed_when: false
  tags:
    - ssh-ufw
    - ssh-ufw-set-logging
    - ssh-firewalld
    - ssh-firewalld-set-logging

- name: Allow sshd specific port with ufw
  community.general.ufw:
    rule: allow
    port: "{{ ssh_port }}"
    proto: tcp
  when:
    - ansible_facts['os_family'] == 'Debian'
    - ssh_firewall_enable
  notify:
    - Reload ufw
  tags:
    - ssh-ufw
    - ssh-ufw-allow-sshd
    - ssh-firewalld
    - ssh-firewalld-allow-sshd

- name: Enable ufw service
  community.general.ufw:
    state: enabled
  when:
    - ansible_facts['os_family'] == 'Debian'
    - ssh_firewall_enable
  changed_when: false
  tags:
    - ssh-ufw
    - ssh-ufw-enable
    - ssh-firewalld
    - ssh-firewalld-enable

# Firewall setting for CentOS
- name: Gather service facts on CentOS before Firewalld started
  service_facts:
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ssh_firewall_enable
  tags:
    - ssh
    - ssh-firewalld
    - ssh-firewalld-gather-facts

- name: Start Firewalld service
  systemd:
    name: firewalld
    state: started
    daemon_reload: true
    enabled: true
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - not ansible_facts.services['firewalld.service'].state == 'started'
    - ssh_firewall_enable
  tags:
    - ssh-firewalld
    - ssh-firewalld-start

- name: Gather service facts on CentOS before Firewalld started
  service_facts:
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ssh_firewall_enable
  tags:
    - ssh
    - ssh-firewalld
    - ssh-firewalld-gather-facts

- name: Allow sshd specific port with Firewalld
  ansible.posix.firewalld:
    permanent: yes
    immediate: yes
    port: "{{ item.port }}/{{ item.proto }}"
    state: "{{ item.state }}"
    zone: "{{ item.zone }}"
  with_items:
    - { port: "{{ ssh_port }}", proto: "tcp", state: "enabled", zone: "public" }
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ssh_firewall_enable
  notify:
    - Reload firewalld
  tags:
    - ssh-firewalld
    - ssh-firewalld-allow-sshd

- name: Reload Firewalld service
  systemd:
    name: firewalld
    state: reloaded
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ssh_firewall_enable
  changed_when: false
  tags:
    - ssh-firewalld
    - ssh-firewalld-reload
